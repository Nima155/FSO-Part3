{"version":3,"sources":["components/Form.tsx","components/Persons.tsx","components/SearchFilter.tsx","services/persons.tsx","components/Notification.tsx","App.tsx","index.tsx"],"names":["Form","formSubmit","newName","setNewName","newNumber","setNewNumber","onSubmit","value","onChange","type","Person","ele","callback","name","number","onClick","id","Persons","persons","searchPara","callBack","filter","indexOf","map","SearchFilter","onSearchParaChange","BASE_URL","md","create","newPerson","axios","post","then","res","console","log","data","deleteData","window","confirm","delete","update","newData","put","getAll","get","Notification","message","theme","style","padding","border","color","backgroundColor","margin","borderRadius","App","useState","setPersons","useEffect","personService","setSearchPara","notificationMessage","setNotificationMessage","notificationColor","setNotificationColor","messageSetter","setTimeout","e","target","preventDefault","findIndex","concat","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acd9c3e9.chunk.js","sourcesContent":["import { IFormType } from \"../interfaces\";\r\nexport const Form = ({\r\n\tformSubmit,\r\n\tnewName,\r\n\tsetNewName,\r\n\tnewNumber,\r\n\tsetNewNumber,\r\n}: IFormType) => {\r\n\treturn (\r\n\t\t<form onSubmit={formSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\tname: {/* a controlled component */}\r\n\t\t\t\t<input value={newName} onChange={setNewName} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\tnumber: <input value={newNumber} onChange={setNewNumber} />{\" \"}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button type=\"submit\">add</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n","import { IPersonsType } from \"../interfaces\";\r\nconst Person = ({\r\n\tele,\r\n\tcallback,\r\n}: {\r\n\tele: any;\r\n\tcallback: (id: number, name: string) => void;\r\n}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>\r\n\t\t\t\t{ele.name} {ele.number}{\" \"}\r\n\t\t\t\t<button onClick={() => callback(ele.id, ele.name)}>delete</button>\r\n\t\t\t</p>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nconst Persons = ({ persons, searchPara, callBack }: IPersonsType) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{persons\r\n\t\t\t\t.filter((ele) => ele.name.indexOf(searchPara) !== -1)\r\n\t\t\t\t.map((ele) => (\r\n\t\t\t\t\t<Person ele={ele} key={ele.name} callback={callBack} />\r\n\t\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Persons;\r\n","import { ISearchType } from \"../interfaces\";\r\nconst SearchFilter = ({ onSearchParaChange, searchPara }: ISearchType) => (\r\n\t<>\r\n\t\tfilter shown with\r\n\t\t<input onChange={onSearchParaChange} value={searchPara} />\r\n\t</>\r\n);\r\nexport default SearchFilter;\r\n","import axios from \"axios\";\r\nconst BASE_URL = \"http://localhost:3001/api/persons\";\r\nconst create = (newPerson: any) => {\r\n\t// HTTP POST request to add\r\n\treturn axios.post(BASE_URL, newPerson).then((res) => {\r\n\t\tconsole.log(res);\r\n\t\treturn res.data;\r\n\t});\r\n};\r\nconst getAll = () => axios.get(BASE_URL).then((res) => res.data);\r\n\r\nconst deleteData = (id: number, name: string) => {\r\n\tif (window.confirm(`Delete ${name}?`)) {\r\n\t\t// HTTP delete request\r\n\t\treturn axios.delete(`${BASE_URL}/${id}`).then((res) => res.data);\r\n\t}\r\n\r\n\treturn axios.delete(\"/nothere\").then();\r\n};\r\n\r\nconst update = (newData: any, id: number) => {\r\n\t// HTTP PUT request to update\r\n\treturn axios.put(`${BASE_URL}/${id}`, newData).then((res) => res.data);\r\n};\r\n\r\n// just to silence a warning\r\nconst md = { create, deleteData, update, getAll };\r\nexport default md;\r\n","const Notification = ({\r\n\tmessage,\r\n\ttheme,\r\n}: {\r\n\tmessage: string;\r\n\ttheme: string;\r\n}) => {\r\n\tif (!message) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tpadding: \"10px\",\r\n\t\t\t\tborder: `5px solid ${theme}`,\r\n\t\t\t\tcolor: `${theme}`,\r\n\t\t\t\tbackgroundColor: \"lightgray\",\r\n\t\t\t\tmargin: \"5px 0px\",\r\n\t\t\t\tborderRadius: \"5px\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<p>{message}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Notification;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Form as PersonForm } from \"./components/Form\";\nimport Persons from \"./components/Persons\";\nimport SearchFilter from \"./components/SearchFilter\";\nimport personService from \"./services/persons\";\nimport Notification from \"./components/Notification\";\nimport \"./index.css\";\nconst App = () => {\n\t// dummy data for debugging purposes\n\tconst [persons, setPersons]: any = useState([]);\n\t// initial fetching from a \"server\" after the first render.\n\tuseEffect(() => {\n\t\tpersonService.getAll().then((res) => {\n\t\t\tconsole.log(res);\n\t\t\tsetPersons(res);\n\t\t});\n\t}, []);\n\tconst [newName, setNewName] = useState(\"\");\n\tconst [newNumber, setNewNumber] = useState(\"\");\n\tconst [searchPara, setSearchPara] = useState(\"\");\n\tconst [notificationMessage, setNotificationMessage] = useState(\"\");\n\tconst [notificationColor, setNotificationColor] = useState(\"\");\n\tconst messageSetter = (message: string, color: string) => {\n\t\tsetNotificationColor(color);\n\t\tsetNotificationMessage(message);\n\t\tsetTimeout(() => setNotificationMessage(\"\"), 5000);\n\t};\n\n\tconst formSubmit = (e: any) => {\n\t\t// stop page from refreshing\n\t\te.preventDefault();\n\t\t// dont add if already present\n\t\tconst possibleIndex = persons.findIndex(\n\t\t\t(ele: { name: string }) => ele.name === newName\n\t\t);\n\t\tif (possibleIndex !== -1) {\n\t\t\t// if (\n\t\t\t// \twindow.confirm(\n\t\t\t// \t\t`${newName} is already in the phonebook, replace the old number with a new one?`\n\t\t\t// \t)\n\t\t\t// ) {\n\t\t\t// \tpersonService\n\t\t\t// \t\t.update(\n\t\t\t// \t\t\t{ ...persons[possibleIndex], number: newNumber },\n\t\t\t// \t\t\tpersons[possibleIndex].id\n\t\t\t// \t\t)\n\t\t\t// \t\t.then((res) => {\n\t\t\t// \t\t\tsetPersons(\n\t\t\t// \t\t\t\tpersons.map((ele: any) =>\n\t\t\t// \t\t\t\t\tele.id === persons[possibleIndex].id ? res : ele\n\t\t\t// \t\t\t\t)\n\t\t\t// \t\t\t);\n\t\t\t// \t\t\tmessageSetter(\n\t\t\t// \t\t\t\t`Changed ${persons[possibleIndex].name}s number`,\n\t\t\t// \t\t\t\t\"green\"\n\t\t\t// \t\t\t);\n\t\t\t// \t\t})\n\t\t\t// \t\t.catch(() => {\n\t\t\t// \t\t\tmessageSetter(\n\t\t\t// \t\t\t\t`Information of ${newName} has already been removed from server`,\n\t\t\t// \t\t\t\t\"red\"\n\t\t\t// \t\t\t);\n\t\t\t// \t\t\tsetPersons(\n\t\t\t// \t\t\t\tpersons.filter((ele: any) => ele.id !== persons[possibleIndex].id)\n\t\t\t// \t\t\t);\n\t\t\t// \t\t});\n\t\t\t// }\n\n\t\t\treturn;\n\t\t}\n\t\tconst newPerson = {\n\t\t\tname: newName,\n\t\t\tnumber: newNumber,\n\t\t};\n\n\t\tpersonService\n\t\t\t.create(newPerson)\n\t\t\t.then((res) => {\n\t\t\t\tmessageSetter(`Added ${newPerson.name}`, \"green\");\n\t\t\t\tsetPersons(persons.concat(res));\n\t\t\t\tsetNewName(\"\");\n\t\t\t\tsetNewNumber(\"\");\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tmessageSetter(`Failed to add ${newPerson.name}`, \"red\");\n\t\t\t});\n\t};\n\tconst deleteUser = (id: number, name: string) => {\n\t\tpersonService\n\t\t\t.deleteData(id, name)\n\t\t\t.then(() => {\n\t\t\t\tmessageSetter(`Deleted ${name} from the database`, \"green\");\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tmessageSetter(\n\t\t\t\t\t`Failed to delete ${name}, the user might already be deleted`,\n\t\t\t\t\t\"red\"\n\t\t\t\t);\n\t\t\t});\n\t\tsetPersons(persons.filter((ele: any) => ele.id !== id));\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Phonebook</h2>\n\t\t\t<Notification message={notificationMessage} theme={notificationColor} />\n\t\t\t<SearchFilter\n\t\t\t\tonSearchParaChange={(e) => setSearchPara(e.target.value)}\n\t\t\t\tsearchPara={searchPara}\n\t\t\t/>\n\t\t\t<h2>add a new</h2>\n\t\t\t<PersonForm\n\t\t\t\tformSubmit={formSubmit}\n\t\t\t\tnewNumber={newNumber}\n\t\t\t\tnewName={newName}\n\t\t\t\tsetNewNumber={(e) => setNewNumber(e.target.value)}\n\t\t\t\tsetNewName={(e) => setNewName(e.target.value)}\n\t\t\t/>\n\t\t\t<h2>Numbers</h2>\n\t\t\t<Persons\n\t\t\t\tsearchPara={searchPara}\n\t\t\t\tpersons={persons}\n\t\t\t\tcallBack={deleteUser}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}